package dhcpmsg

import (
	"net"
	"testing"
	"time"

	"github.com/google/go-cmp/cmp"
)

func TestAssemble(t *testing.T) {
	input := []struct {
		want []byte
		msg  *Message
	}{
		{
			msg: &Message{},
			want: []byte{
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			}}, {
			msg: &Message{
				Op:             0x39,
				Htype:          0x44,
				Hlen:           0x06,
				Hops:           0x07,
				Xid:            0xfefa,
				Secs:           0x12,
				Flags:          0xef,
				ClientIP:       net.IPv4(9, 8, 7, 6),
				YourIP:         net.IPv4(1, 2, 3, 4),
				NextIP:         net.IPv4(10, 11, 12, 13),
				RelayIP:        net.IPv4(99, 88, 77, 66),
				ClientMAC:      [6]byte{0xaa, 0xbb, 0xcc, 0x11, 0x22, 0x33},
				MACPadding:     [10]byte{1, 1, 1, 1, 1, 1, 1, 1, 1, 2},
				ServerHostName: [64]byte{'f', 'o', 'o'},
				BootFilename:   [128]byte{'b', 'o', 'o', 't', '.', 'b', 'i', 'n'},
				Cookie:         DHCPCookie,
				Options: []DHCPOpt{
					OptionType(MsgTypeDiscover),
					OptionHostname("xhostname"),
					OptionMaxMessageSize(0xfefa),
					OptionClientIdentifier([6]byte{0x11, 0x22, 0x33, 0x44, 0x55, 0x66}),
					OptionRequestedIP(net.IPv4(1, 2, 3, 4)),
					OptionServerIdentifier(net.IPv4(9, 8, 7, 6)),
					OptionParametersList(1, 2, 255, 18),
					OptionInterfaceMTU(0xf3f1),
					OptionIPAddressLeaseDuration(30 * time.Minute),
					OptionSubnetMask(net.IPv4Mask(255, 255, 255, 0)),
					OptionRouter(net.IPv4(127, 0, 0, 29)),
				},
			},
			want: []byte{
				0x39, 0x44, 0x06, 0x07, 0x00, 0x00, 0xfe, 0xfa, 0x00, 0x12, 0x00, 0xef, 0x09, 0x08, 0x07, 0x06,
				0x01, 0x02, 0x03, 0x04, 0x0a, 0x0b, 0x0c, 0x0d, 0x63, 0x58, 0x4d, 0x42, 0xaa, 0xbb, 0xcc, 0x11,
				0x22, 0x33, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x66, 0x6f, 0x6f, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x6f, 0x6f, 0x74,
				0x2e, 0x62, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x82, 0x53, 0x63,
				0x35, 0x01, 0x01, 0x0c, 0x09, 0x78, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
				0x39, 0x02, 0xfe, 0xfa, // Max DHCP message size
				0x3d, 0x0f, 0xff, 0x34, 0x59, 0x13, 0xd6, 0x00, 0x03, 0x00, 0x01, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, // Client Identifier
				0x32, 0x04, 0x01, 0x02, 0x03, 0x04, // RequestedIP
				0x36, 0x04, 0x09, 0x08, 0x07, 0x06, // ServerIdentifier
				0x37, 0x04, 0x01, 0x02, 0xff, 0x12, // Parameters list
				0x1a, 0x02, 0xf3, 0xf1, // Interface MTU
				0x33, 0x04, 0x00, 0x00, 0x07, 0x08, // Lease Duration
				0x01, 0x04, 0xff, 0xff, 0xff, 0x00, // Subnet mask
				0x03, 0x04, 0x7f, 0x00, 0x00, 0x1d, // Router
				0xff,
			},
		},
	}

	for i, test := range input {
		data := test.msg.Assemble()
		if diff := cmp.Diff(test.want, data); diff != "" {
			t.Errorf("test #%d had a diff: %s", i, diff)
		}
	}
}
