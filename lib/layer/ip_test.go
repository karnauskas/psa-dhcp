package layer

import (
	"net"
	"testing"

	"github.com/google/go-cmp/cmp"
)

func TestDecodeIPv4(t *testing.T) {
	input := []struct {
		data []byte
		fail bool
		want *IPv4
	}{
		// okay with data
		{data: []byte{0x45, 0x00, 0x00, 0x16, 0xC6, 0xB3, 0x00, 0x00, 0x3A, 0x11, 0xE7, 0xC0, 0x18, 0x08, 0xf8, 0x28, 0xC0, 0xA8, 0x01, 0x11, 0xAA, 0xFF},
			want: &IPv4{
				Identification: 0xc6b3,
				TTL:            0x3a,
				Protocol:       0x11,
				Checksum:       0xe7c0,
				Source:         net.IPv4(24, 8, 248, 40),
				Destination:    net.IPv4(192, 168, 1, 17),
				Data:           []byte{0xAA, 0xFF},
			}},
		// okay, no data
		{data: []byte{0x45, 0x00, 0x00, 0x14, 0xC6, 0xB3, 0x00, 0x00, 0x3A, 0x11, 0xE7, 0xC0, 0x18, 0x08, 0xf8, 0x28, 0xC0, 0xA8, 0x01, 0x11},
			want: &IPv4{
				Identification: 0xc6b3,
				TTL:            0x3a,
				Protocol:       0x11,
				Checksum:       0xe7c0,
				Source:         net.IPv4(24, 8, 248, 40),
				Destination:    net.IPv4(192, 168, 1, 17),
				Data:           []byte{},
			}},
		// tlen is 19, payload is 20
		{data: []byte{0x45, 0x00, 0x00, 0x13, 0xC6, 0xB3, 0x00, 0x00, 0x3A, 0x11, 0xE7, 0xC0, 0x18, 0x08, 0xf8, 0x28, 0xC0, 0xA8, 0x01, 0x11}, fail: true},
		// tlen is 20, payload is 21
		{data: []byte{0x45, 0x00, 0x00, 0x14, 0xC6, 0xB3, 0x00, 0x00, 0x3A, 0x11, 0xE7, 0xC0, 0x18, 0x08, 0xf8, 0x28, 0xC0, 0xA8, 0x01, 0x11, 0x00}, fail: true},
		// IHL is zero
		{data: []byte{0x40, 0x00, 0x00, 0x14, 0xC6, 0xB3, 0x00, 0x00, 0x3A, 0x11, 0xE7, 0xC0, 0x18, 0x08, 0xf8, 0x28, 0xC0, 0xA8, 0x01, 0x11}, fail: true},
		// empty
		{data: []byte{}, fail: true},
		// bad
		{data: []byte{0x40, 0x00}, fail: true},
	}

	for i, test := range input {
		v4, err := DecodeIPv4(test.data)
		if test.fail && err == nil {
			t.Errorf("expected test #%d to fail, but finished", i)
		}
		if !test.fail && err != nil {
			t.Errorf("test #%d unexpectedly failed with: %v", i, err)
		}
		if diff := cmp.Diff(test.want, v4); diff != "" {
			t.Errorf("test #%d had a diff: %s", i, diff)
		}
	}
}

func TestAssembleIPv4(t *testing.T) {
	input := []struct {
		want []byte
		v4   *IPv4
	}{
		{want: []byte{0x45, 0x00, 0x00, 0x16, 0xC6, 0xB3, 0x00, 0x00, 0x3A, 0x11, 0xE8, 0x39, 0x18, 0x08, 0xf8, 0x28, 0xC0, 0xA8, 0x01, 0x11, 0xAA, 0xFF},
			v4: &IPv4{
				Identification: 0xc6b3,
				TTL:            0x3a,
				Protocol:       0x11,
				Source:         net.IPv4(24, 8, 248, 40),
				Destination:    net.IPv4(192, 168, 1, 17),
				Data:           []byte{0xAA, 0xFF},
			}},
		{want: []byte{0x45, 0x00, 0x00, 0x14, 0xC6, 0xB3, 0x41, 0x23, 0x3A, 0x11, 0xA7, 0x18, 0x18, 0x08, 0xf8, 0x28, 0xC0, 0xA8, 0x01, 0x11},
			v4: &IPv4{
				Identification: 0xc6b3,
				TTL:            0x3a,
				Protocol:       0x11,
				Flags:          0x4123,
				Source:         net.IPv4(24, 8, 248, 40),
				Destination:    net.IPv4(192, 168, 1, 17),
				Data:           []byte{},
			}},
		{want: []byte{0x45, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xeb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			v4: &IPv4{}},
	}

	for i, test := range input {
		data := test.v4.Assemble()
		if diff := cmp.Diff(test.want, data); diff != "" {
			t.Errorf("test #%d had a diff: %s", i, diff)
		}
	}
}
